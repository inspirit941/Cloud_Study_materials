1
00:00:09,300 --> 00:00:14,440
지금까지 Kubernetes 객체가 무엇인지 관련된 개념들과 함께 설명했습니다.

2
00:00:14,440 --> 00:00:19,290
kubernetes에서 사용 가능한 기본 객체들을 알아보겠습니다.

3
00:00:19,290 --> 00:00:22,470
첫 번째 객체는 Pod입니다.

4
00:00:22,470 --> 00:00:26,460
Kubernetes에 배포할 수 있는 가장 간단한 단위입니다.

5
00:00:26,460 --> 00:00:32,279
Pod는 클러스터에서 실행되는 하나의 프로세스를 의미합니다; 또는 클러스터에서

6
00:00:32,279 --> 00:00:38,489
애플리케이션이 실행되는 인스턴스 하나를 뜻합니다. 보통 Pod는 컨테이너 하나를 래핑하지만,

7
00:00:38,489 --> 00:00:45,140
리소스를 공유하며 강하게 결합해 있는 여러 개의 컨테이너를 캡슐화하기도 합니다.

8
00:00:45,140 --> 00:00:52,460
여러 개의 컨테이너를 캡슐화하는 건 수준 높은 예시입니다. 일반적으로, Pod는 단일 컨테이너의 래퍼로 간주하는 편입니다.

9
00:00:52,460 --> 00:00:57,949
Pod가 애플리케이션의 단일 인스턴스를 의미하므로, Pod의 복제본을

10
00:00:57,949 --> 00:01:04,559
만드는 건 애플리케이션을 수평적으로 확장하는 것과 같습니다. Kubernetes 아키텍처에서

11
00:01:04,559 --> 00:01:10,100
설명했던 것처럼, Pod에 있는 컨테이너를 실행하려면 container runtime이 필요합니다.

12
00:01:10,100 --> 00:01:16,730
kubectl CLI로 객체를 생성하려면, 생성할 객체의 내용을 정의한

13
00:01:16,730 --> 00:01:23,590
yaml 파일이 필요합니다. 간단한 Pod를 정의한 yaml 파일의 예시를 보겠습니다.

14
00:01:23,590 --> 00:01:26,930
예시 파일에 있는 필드를 설명하자면,

15
00:01:26,930 --> 00:01:30,770
kind 필드는 말 그대로, 생성할 객체의

16
00:01:30,770 --> 00:01:36,030
종류를 지정합니다. 이 경우 Pod를 생성합니다.

17
00:01:36,030 --> 00:01:39,350
다음 필드는 spec입니다.

18
00:01:39,350 --> 00:01:44,110
이 필드는 어떤 종류의 객체를 만들 것인지 구분하는 부분이므로,

19
00:01:44,110 --> 00:01:47,410
정의할 객체에 맞는 적절한 필드값을 입력해야 합니다.

20
00:01:47,410 --> 00:01:52,610
이 경우, Pod를 실행할 컨테이너를 정의했습니다.

21
00:01:52,610 --> 00:01:59,150
Pod spec에서는 최소한 하나의 컨테이너 설정이 필요합니다. 물론 여러 개의 컨테이너를 설정할 수도 있지만,

22
00:01:59,150 --> 00:02:04,420
보통은 하나를 설정합니다. 컨테이너의 name 필드를 보면,

23
00:02:04,420 --> 00:02:09,020
nginx라고 쓰여 있습니다. image 필드는 어떤 종류의 이미지를

24
00:02:09,020 --> 00:02:13,670
pod에서 실행할 것인지 명시합니다. IBM Cloud Container Registry 같은

25
00:02:13,670 --> 00:02:19,150
비공개 레포지토리를 사용할 경우, 도메인과 레포지토리 이름, 태그가 포함되는 만큼

26
00:02:19,150 --> 00:02:24,600
이미지 필드 내용이 길어질 수 있습니다. 마지막으로, ports는 컨테이너가 외부에 노출할

27
00:02:24,600 --> 00:02:30,640
포트 번호들을 의미합니다. 다음으로 소개할 객체는 ReplicaSet입니다.

28
00:02:30,640 --> 00:02:36,320
이름에서 알 수 있듯, ReplicaSet은 동일한 Pods의 그룹입니다.

29
00:02:36,320 --> 00:02:41,350
Pod의 복제본을 실행하여 애플리케이션을 수평적으로 확장할 수 있다고

30
00:02:41,350 --> 00:02:45,880
언급했던 바 있습니다. 이 작업을 수행하는 객체가 ReplicaSet입니다.

31
00:02:45,880 --> 00:02:52,670
ReplicaSet을 생성하려면, Pod 한 개를 정의하기 위한 필드명에 비해 몇 가지 값이 다릅니다.

32
00:02:52,670 --> 00:02:57,790
ReplicaSet을 생성해야 하므로 kind 필드명이 ReplicaSet으로 바뀝니다.

33
00:02:57,790 --> 00:03:02,410
ReplicaSet은 Pod와 다르기 때문에, 객체에 정의할 spec도

34
00:03:02,410 --> 00:03:06,730
필요한 필드값이 다릅니다. 여기서 가장 중요한 필드는

35
00:03:06,730 --> 00:03:11,170
"replicas" 필드입니다. 정의한 Pod의 복제본을

36
00:03:11,170 --> 00:03:15,410
몇 개 만들어 구동할 것인지 정의하는 필드입니다.

37
00:03:15,410 --> 00:03:21,790
이 필드가 수정되면, ReplicaSet은 이 필드에서 정의한 값에 맞추어

38
00:03:21,790 --> 00:03:27,770
Pod를 생성하거나 삭제합니다. template 필드도 ReplicaSet에서

39
00:03:27,770 --> 00:03:30,680
설정합니다. 이 필드는 ReplicaSet에서 생성할 Pod 개수를

40
00:03:30,680 --> 00:03:36,970
정의하기 때문에 매우 중요한 필드입니다. replica의 개수를 변경하면, 변경된 개수만큼

41
00:03:36,970 --> 00:03:43,900
Pods을 어떻게 생성할 것인지 이 필드의 값을 토대로 결정합니다. 예시의 경우,

42
00:03:43,900 --> 00:03:48,990
ReplicaSet에서 Pod의 정의내용을 캡슐화하고 복제에 필요한 정보를 추가했습니다.

43
00:03:48,990 --> 00:03:52,430
마지막으로 설명할 필드는 selector입니다.

44
00:03:52,430 --> 00:03:59,709
지난 강의에서 레이블은 고유성이 없으며, 선택자는 Kubernetes 그룹핑 기능의 핵심 요소였다고 설명했습니다.

45
00:03:59,709 --> 00:04:04,739
레이블과 선택자가 어떻게 사용되는지 예시를 통해 볼 수 있습니다. 레이블은

46
00:04:04,739 --> 00:04:09,120
ReplicaSet에 있는 Pod의 식별자를 입력하는 필드입니다.

47
00:04:09,120 --> 00:04:16,650
간단히 말해, ReplicaSet이 생성한 Pods는 ReplicaSet의 참조값을 가지고 있습니다.

48
00:04:16,650 --> 00:04:22,310
이 연결은 Pods의 상태 관련해서 필요한 정보를 ReplicaSet에 전달합니다.

49
00:04:22,310 --> 00:04:27,680
레이블의 matchLabels 필드는 template 필드의 label값과 동일합니다.

50
00:04:27,680 --> 00:04:31,710
둘 다 "app : nginx"입니다.

51
00:04:31,710 --> 00:04:37,069
하지만, ReplicaSet을 직접 생성하는 방식은 추천하지 않습니다.

52
00:04:37,069 --> 00:04:43,849
대신, ReplicaSet을 관리하는 더 추상화된 개념인 Deployment 객체가

53
00:04:43,849 --> 00:04:49,020
관리하기 쉽고, 더 많은 기능을 제공합니다. 따라서 보통은 Deployment 객체를

54
00:04:49,020 --> 00:04:52,520
사용자가 직접 생성합니다. 사실, 사용자가 ReplicaSet을 직접

55
00:04:52,520 --> 00:04:58,509
조정하는 경우는 거의 없고, Deployment 객체가 대신 작업합니다.

56
00:04:58,509 --> 00:05:03,680
그래도 ReplicaSet을 이해하면, 복제본이 어떻게 만들어지는지

57
00:05:03,680 --> 00:05:08,590
알 수 있으므로, ReplicaSet 객체가 등장했을 때 금방 이해할 수 있을 것입니다.

58
00:05:08,590 --> 00:05:14,740
Deployment 객체는 Pods와 ReplicaSet의 업데이트를 제공합니다.

59
00:05:14,740 --> 00:05:21,060
Deployment 객체는 ReplicaSet을 생성하고, ReplicaSet를 관리하며

60
00:05:21,060 --> 00:05:27,159
애플리케이션의 복제본 여러 개를 실행하는 객체입니다. 특히, stateless한 애플리케이션을

61
00:05:27,159 --> 00:05:32,330
다룰 때 효과적입니다. 그 외에도 다양한 상황에서 사용할 수 있습니다.

62
00:05:32,330 --> 00:05:39,009
복제된 애플리케이션을 배포하거나, Deployment 객체가 관리하는 Pod을 업데이트하거나,

63
00:05:39,009 --> 00:05:43,210
애플리케이션을 확장할 때 사용할 수 있습니다. 강의 슬라이드 오른쪽에 있는

64
00:05:43,210 --> 00:05:46,919
Deployment 명세를 보면 특이한 점이 하나 있습니다.

65
00:05:46,919 --> 00:05:52,410
간단한 이름 변경을 빼면, 정의 사항이 ReplicaSet과 동일합니다.

66
00:05:52,410 --> 00:05:57,280
물론, Deployment와 ReplicaSet의 정의가 항상

67
00:05:57,280 --> 00:06:03,870
동일하다는 것은 아닙니다; Deployment가 더 강력하고, 추가 개체를 제공합니다.

68
00:06:03,870 --> 00:06:10,499
이 예시처럼 최소한의 설정만 놓고 보면, Deployment와 ReplicaSet이 동일한 것처럼 보일 수 있습니다.

69
00:06:10,499 --> 00:06:16,369
kind 필드는 Deployment로 바뀌었습니다. 하지만 replicas의 개수,

70
00:06:16,369 --> 00:06:22,139
생성할 Pods을 식별하기 위한 선택자와 Pod 템플릿은 동일합니다.

71
00:06:22,139 --> 00:06:25,970
모두 ReplicaSet에서 다뤘던 개념들입니다.

72
00:06:25,970 --> 00:06:30,979
replicas 필드는 Deployment 객체에서 복제본을 생성하라는 의미이며,

73
00:06:30,979 --> 00:06:36,999
ReplicaSet이 생성됩니다. Deployment에서는 제공하지만 ReplicaSet에서는

74
00:06:36,999 --> 00:06:44,139
제공하지 않는 기능 중 하나가 무중단 배포 기능입니다. ReplicaSet은

75
00:06:44,139 --> 00:06:49,289
단일 Pod 템플릿만을 지원합니다; 만약 애플리케이션의 새 버전을 배포하고 싶다면,

76
00:06:49,289 --> 00:06:56,039
Pod 템플릿을 정의한 새 Deployment 객체를 생성해야 합니다. 무중단 배포는

77
00:06:56,039 --> 00:07:01,689
애플리케이션의 새 버전으로 복제본을 업데이트하고, 오래된 버전의 복제본 개수를 0으로 만듭니다.

78
00:07:01,689 --> 00:07:08,770
따라서 ReplicaSet은 Pods의 개수를 관리하고 필요한 개수만큼의 Pods를 유지하도록

79
00:07:08,770 --> 00:07:14,860
관리한다면, Deployment는 애플리케이션이 새로운 버전으로 무중단 배포될 수 있도록

80
00:07:14,860 --> 00:07:18,889
조율하는 역할을 합니다. 이번 강의에서는 Kubernetes의 최소 단위인

81
00:07:18,889 --> 00:07:24,300
Pods를 배웠습니다. 또한 ReplicaSet이 어떻게 Pods의 개수를 유지하는지,

82
00:07:24,300 --> 00:07:28,740
애플리케이션을 어떻게 확장하는지 배웠습니다.

83
00:07:28,740 --> 00:07:34,860
그리고 Deployment가 ReplicaSet보다 더 높은 수준의 구성이며,

84
00:07:34,860 --> 00:07:41,650
ReplicaSet과 Pods의 업데이트를 지원한다는 사실을 배웠습니다. 다음 강의에서는

85
00:07:41,650 --> 00:07:48,060
Kubernetes의 CLI인 "kubectl"을 어떻게 사용하는지를 다루겠습니다.

